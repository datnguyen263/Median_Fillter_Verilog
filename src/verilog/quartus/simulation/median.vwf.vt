// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2021 22:25:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg [7:0] In;
reg Valid_IN;
// wires                                               
wire Valid_OUT;
wire [7:0] result;

// assign statements (if any)                          
test_module i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.In(In),
	.Valid_IN(Valid_IN),
	.Valid_OUT(Valid_OUT),
	.result(result)
);
initial 
begin 
#1000000 $stop;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// CLR
initial
begin
	CLR = 1'b1;
	CLR = #10000 1'b0;
end 
// In[ 7 ]
initial
begin
	In[7] = 1'b0;
end 
// In[ 6 ]
initial
begin
	In[6] = 1'b0;
	In[6] = #640000 1'b1;
end 
// In[ 5 ]
initial
begin
	In[5] = 1'b0;
	In[5] = #320000 1'b1;
	In[5] = #320000 1'b0;
	In[5] = #320000 1'b1;
end 
// In[ 4 ]
initial
begin
	repeat(3)
	begin
		In[4] = 1'b0;
		In[4] = #160000 1'b1;
		# 160000;
	end
	In[4] = 1'b0;
end 
// In[ 3 ]
initial
begin
	repeat(6)
	begin
		In[3] = 1'b0;
		In[3] = #80000 1'b1;
		# 80000;
	end
	In[3] = 1'b0;
end 
// In[ 2 ]
initial
begin
	repeat(12)
	begin
		In[2] = 1'b0;
		In[2] = #40000 1'b1;
		# 40000;
	end
	In[2] = 1'b0;
end 
// In[ 1 ]
always
begin
	In[1] = 1'b0;
	In[1] = #20000 1'b1;
	#20000;
end 
// In[ 0 ]
always
begin
	In[0] = 1'b0;
	In[0] = #10000 1'b1;
	#10000;
end 

// Valid_IN
initial
begin
	Valid_IN = 1'b0;
end 
endmodule

